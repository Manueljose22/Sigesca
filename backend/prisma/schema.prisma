generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ==================================================================================

enum NivelAcesso {
  admin
  student
  teacher
}

enum Turno {
  Manha
  Tarde
  Noite
}

enum Tipo_matricula {
  Novo
  Confirmacao
  Transferencia
}

model Sessao {
  idUsuario   String      @id @default(uuid())
  codigo      Int         @unique
  senha       String
  nivelAcesso NivelAcesso @default(value: admin)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
  professorId String?     @map("professor_id")
  alunoId     String?     @map("aluno_id")
  Aluno       Aluno?      @relation(fields: [alunoId], references: [idAluno], onDelete: Cascade)
  Professor   Professor?  @relation(fields: [professorId], references: [idProfessor], onDelete: Cascade)

  @@map("Sessoes")
}

model Aluno {
  idAluno         String       @id @default(uuid())
  n_matricula     Int          @unique
  nome            String
  email           String       @unique
  documento       String
  numero_bi       String       @unique
  data_nascimento String
  bi_validade     String
  nacionalidade   String
  naturalidade    String
  genero          String
  telefone        String
  foto            String?
  pdc             String
  enderecosId     String       @unique @map("endereco_id")
  responsaveisId  String       @unique @map("responsavel_id")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @default(now()) @map("updated_at")
  responsavel     Responsavel? @relation(fields: [responsaveisId], references: [idResponsavel])
  Endereco        Endereco?    @relation(fields: [enderecosId], references: [idEndereco])
  avaliacao       Avaliacao[]
  pagamento       Pagamento[]
  matricula       Matricula[]
  Sessao          Sessao[]

  @@map("Alunos")
}

model Responsavel {
  idResponsavel String    @id() @default(uuid())
  nome_pai      String
  nome_mae      String
  telefone      String    @unique
  enderecosId   String    @unique @map("endereco_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  Endereco      Endereco? @relation(fields: [enderecosId], references: [idEndereco], onDelete: Cascade, onUpdate: Cascade)
  aluno         Aluno?

  @@map("Responsaveis")
}

model Professor {
  idProfessor   String          @id @default(uuid())
  usuarioId     String          @unique @map("usuario_id")
  nome          String
  formacao      String
  nivel         String
  numero_bi     String          @unique
  validade_bi   String
  Documento     String
  telefone      String          @unique
  email         String          @unique
  foto          String?
  pdc           String
  salario       Float
  enderecoId    String          @unique @map("endereco_id")
  Endereco      Endereco?       @relation(fields: [enderecoId], references: [idEndereco], onDelete: Cascade, onUpdate: Cascade)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @map("updated_at")
  Sessao        Sessao[]
  discprofessor DiscProfessor[]

  @@map("Professores")
}

model Endereco {
  idEndereco String        @id() @default(uuid())
  municipio  String
  bairro     String
  rua        String
  casa       String
  created_At DateTime      @default(now()) @map("created_at")
  updated_At DateTime      @default(now()) @map("updated_at")
  resposavel Responsavel[]
  professor  Professor[]
  aluno      Aluno[]

  @@map("Enderecos")
}

model Curso {
  idCurso   String   @id @default(uuid())
  nome      String
  descricao String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  Turma     Turma[]

  @@map("Cursos")
}

model Disciplina {
  idDisciplina  String          @id @default(uuid())
  nome          String
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @default(now()) @map("updated_at")
  discProfessor DiscProfessor[]
  avaliacao     Avaliacao[]

  @@map("Disciplinas")
}

model Nivel {
  idNivel   String   @id @default(uuid())
  nome      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  Turma     Turma[]

  @@map("NÃ­veis_Acedemicos")
}

model Sala {
  idSala           String   @id @default(uuid())
  nome             String
  capacidadeAlunos Int
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @map("updated_at")
  Turma            Turma[]

  @@map("Salas")
}

model Turma {
  idTurma          String          @id @default(uuid())
  nome             String
  turno            Turno
  cursosId         String?         @map("curso_id")
  niveisId         String?         @map("niveil_id")
  salaId           String?         @map("sala_id")
  periodo_letivoId String?         @map("periodo_letivo_id")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")
  curso            Curso?          @relation(fields: [cursosId], references: [idCurso])
  nivel            Nivel?          @relation(fields: [niveisId], references: [idNivel])
  Sala             Sala?           @relation(fields: [salaId], references: [idSala])
  Periodo_letivo   Periodo_letivo? @relation(fields: [periodo_letivoId], references: [idPeriod])
  avalicao         Avaliacao[]
  Matricula        Matricula[]

  @@map("Turmas")
}

model Periodo_letivo {
  idPeriod   String      @id @default(uuid())
  year         String
  dateStart    DateTime    @db.Date()
  dateEnd    DateTime    @db.Date()
  status      Boolean     @default(value: false)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
  Turma       Turma[]
  Matricula   Matricula[]
}

model Matricula {
  idMatricula      String          @id @default(uuid())
  alunosId         String?         @map("aluno_id")
  turmaId          String?         @map("turma_id")
  periodo_letivoId String?         @map("periodo_letivo_id")
  tipo             Tipo_matricula  @default(value: Novo)
  data_matricula   DateTime
  recibo_pagamento String          @unique
  status           Boolean         @default(false)
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")
  Aluno            Aluno?          @relation(fields: [alunosId], references: [idAluno])
  Turma            Turma?          @relation(fields: [turmaId], references: [idTurma])
  Periodo_letivo   Periodo_letivo? @relation(fields: [periodo_letivoId], references: [idPeriod])

  @@map("Matriculas")
}

model DiscProfessor {
  id            String   @id @default(uuid())
  professoresId String?  @map("professor_id")
  disciplinasId String?  @map("disciplina_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")

  professor  Professor?  @relation(fields: [professoresId], references: [idProfessor])
  disciplina Disciplina? @relation(fields: [disciplinasId], references: [idDisciplina])

  @@map("DiscProfessores")
}

model Avaliacao {
  idAvaliacao   String  @id @default(uuid())
  parcelar1     Float
  parcelar2     Float
  parcelar3     Float
  recurso       Float
  mediaFinal    Float
  alunosId      String? @map("aluno_id")
  disciplinasId String? @map("disciplina_id")
  turmasId      String? @map("turma_id")

  Aluno      Aluno?      @relation(fields: [alunosId], references: [idAluno])
  Disciplina Disciplina? @relation(fields: [disciplinasId], references: [idDisciplina])
  Turma      Turma?      @relation(fields: [turmasId], references: [idTurma])
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @default(now()) @map("updated_at")

  @@map("Avaliacoes")
}

model Pagamento {
  idPagamento    String   @id @default(uuid())
  alunosId       String?  @map("aluno_id")
  valor          Float
  data_pagamento DateTime @db.Date()
  status         Boolean  @default(false)
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  Aluno          Aluno?   @relation(fields: [alunosId], references: [idAluno])

  @@map("Pagamentos")
}
